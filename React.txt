---------React'ın 3 ana bileşeni---------
1- Component : bir yapın tanımlanır tekrar tekrar kullanılır.
2- Props : componentler arası veri taşıma işlemi.
3- State Management : Verileri tutup saklama (Context Api , Redux toolkit)

ReactJS (JSX) => JS + HTML



--------------Proje Çalıştırma--------------
-----ESKİ YÖNTEM-----
npx create-react-app uygulama_adı
cd uygulama_adı
npm start

Hata Çıkarsa
npm install --save-dev web-vitals

-----YENİ YÖNTEM-----
Vite ile oluşturma
https://vite.dev/guide/

C:\Users\xsaozdemir\WebProjectWorkspace\>npm create vite@latest
- enter project name
- select React
- select JavaScript

        Vite sürümü seçmek için=> npm create vite@5.4

cd project name
npm install
npm run dev

stop: ctrl + c

---NODE JS---
set PATH=E:\NodeJS\nodejs-v18.20.6;%PATH%


------------------------Eklentiler------------------------
Modern React Snippets
    rfce: react functional component


ES Lint Kapatma .eslintrc.cjs dosyasına aşağıdaki satır eklenir
    "rules": {
        "no-unused-vars": "off"
    }

--------------Otak Sistem Bileşenleri--------------
nodejs  : 16.14.0
npm     : 8.3.1
vite    : 5.4.11 (5.4.8)


---React Proje Mimarisi---
node_modules    : paket ve proje için gerekenler (npm install ile indi)
public          :
src             : Kaynak dosyaları
    App.css         : App.jsx içinde çağrıldı.
    eslint.config.js: Kod standartlarını kontrol ediyor.
    package.json    : çalıştırma için gereken kütüphaneler ve scriptler
                    (Örnek= proje dizininde iken -> npm install react-icons)
    index.html      : id si root olan bir div oluşturur.
    main.jsx        : id si root olan elementi seçer ve o div içinde App componentini render eder.
    App.jsx         : main.jsx'de render edilmesi istenen componentin içeriğidir.
-----------------------
---COMPONENT KAVRAMI---
-----------------------
    Component: JS de kullanılan fonksiyondur. 2 farklı kullanımı vardır.
                1- Functional component : Halen kullanılıyor.
                2- Class component : Eskide kaldığı için tercih edilmiyor.
        return: JS kodlarından sonra bir html kodu döndürüyor.
-------------------------
----EXPORT yöntemleri----
-------------------------
    export          : Bir componentin bir parçasını dışarıya göndermek istediğimizde kullanılır. Import edilirken {} kullanılır.
                        export const getAllProducts = () => {
                        };

                        import { getAllProducts } from "../redux/slices/productSlice.jsx";


    export default  : Bir componenti olduğu gibi dışarıya göndermek istediğinizde kullanılır.
                        const appReducer = (state = {}, action) => {
                        };
                        export default appReducer;

                        import appReducer from "../redux/slices/appSlice.jsx";

-------------------
---PROPS KAVRAMI---
-------------------
    Bir veriyi alıp child componente aktarması için kullanılır.

-------------------
---STATE KAVRAMI---
-------------------
    Verileri tutmak için kullanılan hooks dur. Örnek olarak java'da
    String TCNO = "12345678901";
    Bu ifadenin reactdaki karşılığıdır.

    Bir state'in değeri set metodu ile değiştirilirse component yeniden render edilir.

--------------------
---EFFECT KAVRAMI---
--------------------
    3 farklı tipte kullanımı vardır.
        1- Her render işleminde çalış.
        2- Sadece sayfa ilk defa render edilirken çalış.
        3- Bir veya birden fazla state e bağımlı ve sayfa ilk defa render edildiğinde çalış.

 ÖNEMLİ NOTLAR
 1- return içinde bir css kodu yazılacaksa iki adet {} içine yazılır.
    Ör. <div style={{backgroundColor: "orange"}}</div>
 2- return içinde 1 parent component olur. 2 adet yazılamaz.
 3- Fragmet: <></>
 4- Bir state'in değeri set metodu ile değiştirilirse component yeniden render edilir.


------------------------
----REACT ROUTER DOM----
------------------------
    URL değiştikçe hangi component render edilecek bunu belirlemeye yarayan yapıdır.

    Kurulum:
        npm install react-router-dom
    Kullanım:
        1- Routes altına Route componentleri eklenir. Kök url sonuna gelen path değerine göre o element render edilir.
            import {Routes, Route} from "react-router-dom";
        2- Rotute componentine path ve element adında 2 props gönderilir.
            <Routes>
                <Route path={"/"} element={<Home/>}></Route>
                <Route path={"/about"} element={<About/>}></Route>
                <Route path={"*"} element={<NotFoundPage/>}></Route> Eğer sayfa yoksa bunu çalıştır demek
            </Routes>
        3- main.jsx de App componenti BrowserRouter componenti ile sarılır.
            <BrowserRouter>
                 <App/>
            </BrowserRouter>,

        4- Navigasyon barında kullanmak için Link componenti import edilmelidir. Örnek olarak Header componenti içinde kullanıldı.
            import {Link} from "react-router-dom";
        5- Link elementinin to propsuna tıklandığında kök url e eklenecek path verilir.
            <Link to={"/"}>Anasayfa</Link>
            <Link to={"/about"}>Hakkında</Link>
        6- İç içe Link yapısı kullanılacaksa child linke to propsu geçilirlen '/' olmadan yazılır(İç içe route kuralı gereği başa '/' konulmaz!!).
            <Route path={"/about"} element={<About/>}>
                <Route path={"employee"} element={<EmployeeAbout/>}></Route>{/* '/' karakterini başında kullanmadık*/}
                <Route path={"company"} element={<CompanyAbout/>}></Route>
            </Route>
        7-Child link render edilmesi için About componenti altına Link tanımlaması ve en sonra da Outlet componenti eklemesi yapılır.
            <div>
                <div>About</div>
                <div>
                    <hr/>
                    <Link className={"sub-link"} to={"employee"}>Çalışanlar Hakkında</Link>
                    <Link className={"sub-link"} to={"company"}>Şirket Hakkında</Link>
                    <Outlet></Outlet>
                </div>
            </div>
        8- useNavigate hooks kullanımı: yönlendirme işlemi için kullanılır.
            const navigate = useNavigate();
            <button onClick={() => navigate("/product-details/" + id)}>Detayına Git</button>
        9- ProductDetails diye component oluşturulduç
        10- App.jsx içinde Route eklenir. Bu route path ina /products-details/ ve :id eklenerek gelen id değerine göre render yapılır.                            <Route path={"/products-details:id"} element={<Products/>}></Route>



    https://www.javaguides.net/2020/09/react-router-step-by-step-tutorial.html
    https://v5.reactrouter.com/web/guides/quick-start

 --------------------------
 --------FORMIK YUP--------
 --------------------------
 Form dışındaki statelerden değer almaya ve bu değerlerin form kontrollerinin yapılması için geliştirilmiştir.
    Formik  : https://formik.org/docs/overview
                Kurulum: npm install formik --save
    YUP     : https://www.npmjs.com/package/yup
                Kurulum: npm install yup


 -------------------
 --------API--------
 -------------------
 Birden fazla arayüze hizmet verme için yazılmış backend katmanı
    1- SOAP: xml tabanlı, yavaş ve konfigürasyonu zor. Eskiden çok tercih edilen yöntem.
    2- REST: JSON tabanlı, hızlı, popüler ve daha fazla kaynağa sahip

React ile bir API ye istek atma yöntemleri
        Makale Linki=> https://builtin.com/software-engineering-perspectives/react-api
    1- XNLHttpRequest (Çok eski yöntem)
    2- Fetch API (Promiseler ile çaışan api)
    3- Axios (* En çok tercih edilen güncel yönem)
            npm install axios

Fake API için yetenekler ve kurulumlar
     1- Fake Rest API
        JSON PLaceHolder => https://jsonplaceholder.typicode.com/
     2- JSON Server
            Kurulum     : npm install json-server (npm install -g json-server@0.16.3)
            Kontrol     : json-server --version
            DB Oluşturma: src dizini altına db.json adında dosya oluşturulur.
            Çalıştırma  : json-server --watch .\src\db.json --port 4000

Fake Store API
    https://fakestoreapi.com/docs


Axios API
    GET: sorgulama
    POST: yeni kayıt oluşturma
    PUT: update içlemi için
    DELETE: silme işlemi için

---------------------------------------------------
--------------------MATERIAL UI--------------------
---------------------------------------------------

    Hazır arayüz kütüphanesi
    MUI Kütüphanesinde bir komponente sttyle tanımlaması yapılmak istendiğinde style değil "sx" props u kullanılır.


        Kurulumu:   npm install @mui/material @emotion/react @emotion/styled
                    npm install @mui/icons-material @mui/material @emotion/styled @emotion/react

        https://mui.com/material-ui/getting-started/
        https://mui.com/material-ui/material-icons/

        Benzer Kütüphane: Prime React
            https://primereact.org/installation/

----------------------------------------------------
----------------------FIREBASE----------------------
----------------------------------------------------
    Google tarafından geliştiilmiş backend ve authentication işlemleri için hizmet sağlayan bir altyapıdır.
    Backend ve database oluşturmadan bir react uygulaması çalıştırmayı sağlıyor.

    https://console.firebase.google.com/project/fir-example-47545/authentication/users
    https://firebase.google.com/docs/auth/web/google-signin?hl=tr


---------------------------------------------
--------------------UTILS--------------------
---------------------------------------------

React Icons
    npm install react-icons
    https://react-icons.github.io/react-icons/
React Toastify
    npm i react-toastify
    https://www.npmjs.com/package/react-toastify



---------------------------------------------------
--------------------DİL DESTEĞİ--------------------
---------------------------------------------------
----Kurulum:
    npm install react-i18next i18next

----JSON:
    // en/translation.json
    {
      "welcome": "Welcome",
      "description": "This is a sample description"
    }

    // tr/translation.json
    {
      "welcome": "Hoş geldiniz",
      "description": "Bu bir örnek açıklamadır"
    }

----JS:
    import i18n from 'i18next';
    import { initReactI18next } from 'react-i18next';
    import enTranslation from './locales/en/translation.json';
    import trTranslation from './locales/tr/translation.json';

    i18n
      .use(initReactI18next)
      .init({
        resources: {
          en: { translation: enTranslation },
          tr: { translation: trTranslation }
        },
        lng: 'en', // Varsayılan dil
        fallbackLng: 'en',
        interpolation: {
          escapeValue: false
        }
      });

----React:
    import React from 'react';
    import { useTranslation } from 'react-i18next';

    const MyComponent = () => {
      const { t } = useTranslation();

      return (
        <div>
          <h1>{t('welcome')}</h1>
          <p>{t('description')}</p>
        </div>
      );
    };

    export default MyComponent;

---------------------------------------------
--------------------SHORTCUT-----------------
---------------------------------------------
HTML içini doldurma:    ! (VSCode)

Console Yazdırma:   clg (VSCode)
                    log (Ws)

React Fonksiyon Oluşturma:  rfce (VSCode)
                            rsf (Ws)